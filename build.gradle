/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.4.1/userguide/java_library_plugin.html
 */

buildscript {
   repositories {
       jcenter()
   }
   dependencies {
       classpath 'org.gretty:gretty:3.0.3'

       // Flyway migration needs the mysql connector
       classpath 'mysql:mysql-connector-java:5.1.36'
   }
}

// Flyway database migration plugin:
plugins {
    id "org.flywaydb.flyway" version "5.2.4"
    id "com.diffplug.gradle.spotless" version "3.10.0"
}

apply plugin: 'java'
sourceCompatibility = 1.8
targetCompatibility = 1.8
apply plugin: 'war'
apply plugin: 'org.gretty'
apply plugin: 'eclipse-wtp'
apply plugin: 'jacoco'

war {
	webAppDirName = 'WebApp/WebContent'
}

gretty {
  servletContainer = 'tomcat9'
  enableNaming = true
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.

    // http://jcenter.bintray.com/
    jcenter()

  // primefaces repo needed for the cupertino theme
	maven {
		url "http://repository.primefaces.org"
	}
}

dependencies {
	compile "org.primefaces:primefaces:6.2"
	compile "org.primefaces.themes:cupertino:1.0.10"
	compile 'joda-time:joda-time:2.7'
	compile 'javax.el:javax.el-api:3.0.0'
	compile 'mysql:mysql-connector-java:5.1.36'
	compile 'commons-validator:commons-validator:1.4.1'
	compile 'org.apache.commons:commons-email:1.4'
	compile 'org.apache.commons:commons-lang3:3.10'
	compile 'org.apache.commons:commons-math3:3.6'
	compile 'org.apache.commons:commons-csv:1.7'
	//
	compile 'commons-codec:commons-codec:1.3'
	compile 'commons-beanutils:commons-beanutils:1.8.3'
	compile 'commons-collections:commons-collections:3.2'
	compile 'commons-digester:commons-digester:1.8'
	compile 'commons-logging:commons-logging:1.1.1'
	//
	compile 'commons-fileupload:commons-fileupload:1.3.1'
	compile 'org.apache.myfaces.core:myfaces-api:2.2.8'
	compile 'org.apache.myfaces.core:myfaces-impl:2.2.8'
	compile 'org.apache.myfaces.core:myfaces-bundle:2.2.8'

        // Flyway library for Java-based migrations
        compile 'org.flywaydb:flyway-core:5.2.4'

	// Google GSON library
	compile 'com.google.code.gson:gson:2.8.5'

	// Jersey RESTful API
	compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.27'
	compile 'org.glassfish.jersey.inject:jersey-hk2:2.27'
	compile 'org.glassfish.jersey.media:jersey-media-moxy:2.27'
	compile 'org.glassfish.jersey.media:jersey-media-multipart:2.27'

	// gretty plugin handling the tomcat server
	gretty 'org.apache.tomcat:tomcat-dbcp:8.0.1'
	gretty 'org.apache.tomcat:tomcat:8.0.1'

	// Use JUnit test framework
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.0+'
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.0+'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.0+'
	testImplementation 'com.h2database:h2:1.4.197'
	testImplementation 'org.flywaydb.flyway-test-extensions:flyway-spring-test:5.2.1'
	testImplementation 'org.mockito:mockito-core:2.15.0'
	// Flyway library for Java-based migrations
	testImplementation 'org.flywaydb:flyway-core:5.2.4'

	// JUnit resources
	testCompile files('WebApp/junit')
}

sourceSets {
    main {
        java {
            srcDirs = ['WebApp/src', 'src/QC_Routines/src', 'src/migrations']
        }
        resources {
            srcDirs = ['WebApp/WebContent/resources', 'src/migrations']
        }

    }
    test {
        java {
            srcDirs = ['WebApp/junit']
        }
    }
}

compileJava {
  options.encoding = "UTF-8"
}

test {
  useJUnitPlatform()
}

eclipse {
    wtp {
        facet {
            facet name: "jst.web", version: "2.5"       // Dynamic Web Application
            facet name: "java", version: "1.8"          // Java version
            facet name: "wst.jsdt.web", version: "1.0"  // JavaScript
            facet name: "jst.jsf", version: "2.2"       // Java Server Faces
        }
    }

}
def rootPath = file('.').absolutePath
def webContext=new XmlSlurper().parse(rootPath + '/WebApp/WebContent/META-INF/context.xml')

// Load db setup
// Database migration scripts are added to the folder
// src/migrations/flywayMigrations/dbmigrations
// sql migration files are named with:
// V[number]__[any_name].sql, eg V2__new_table_record.sql
flyway {
  url = webContext.Resource.@url
  user = webContext.Resource.@username
  password = webContext.Resource.@password
  locations = ["classpath:db_migrations"]
  baselineOnMigrate = false
}

// Make sure project is cleaned and build before running flywayMigrate task
flywayMigrate {
  dependsOn 'clean'
  dependsOn 'war'
  tasks.findByName('war').mustRunAfter 'clean'
}

spotless {
  // Blocks defining how to format different code types
  format 'java', {
    // Formatting options for java files
    target 'WebApp/**/*.java'
    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
  }
  format 'misc', {
    // Formatting options for misc files
    target 'WebApp/**/*.xhtml', 'WebApp/**/*.xml',
      'WebApp/WebContent/resources/style/dataFiles.css',
      'WebApp/WebContent/resources/style/main.css',
      'WebApp/WebContent/resources/style/manualQc.css',
      'WebApp/WebContent/resources/style/newInstrument.css',
      'WebApp/WebContent/resources/style/plotPage.css',
      'WebApp/WebContent/resources/style/reviewCalibrationData.css',
      'scripts/*.sh', 'scripts/**/*.sh'
    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
  }
  format 'js', {
    // Formatting options for javascript files
    target 'WebApp/WebContent/resources/script/dataFiles.js',
      'WebApp/WebContent/resources/script/dataSets.js',
      'WebApp/WebContent/resources/script/jsColorScale.js',
      'WebApp/WebContent/resources/script/manualQc.js',
      'WebApp/WebContent/resources/script/newInstrument.js',
      'WebApp/WebContent/resources/script/plotPage.js',
      'WebApp/WebContent/resources/script/reviewCalibrationData.js'
    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
  }
  format 'python', {
    // Formatting options for python files
    target 'NRT/*.py'
    trimTrailingWhitespace()
    indentWithSpaces(2)
    endWithNewline()
  }
}

tasks.register("migrationCheck") {
	description = 'Check that database migrations for the app also exist in the junit test config'
	doLast {
		def appMigrationFiles = []
		File appMigrationsDir = new File('./src/migrations/db_migrations')
		appMigrationsDir.eachFileRecurse { file ->
		  if (file.name.endsWith("sql")) {
		    appMigrationFiles << file.getName()
		  }
		}

		def testMigrationFiles = []
		File testMigrationsDir = new File('./WebApp/junit/resources/db_migrations')
		testMigrationsDir.eachFileRecurse { file ->
		  if (file.name.endsWith("sql")) {
		    testMigrationFiles << file.getName()
		  }
		}

		Arrays.sort(appMigrationFiles)
		Arrays.sort(testMigrationFiles)

    def listsMatch = true

    for (appFile in appMigrationFiles) {
      if (!testMigrationFiles.contains(appFile)) {
        listsMatch = false
        println("Missing test migration for " + appFile)
      }
    }

    for (testFile in testMigrationFiles) {
      if (!appMigrationFiles.contains(testFile)) {
        listsMatch = false
        println("Extra test migration file " + testFile + " should not exist")
      }
    }

    if (!listsMatch) {
      throw new GradleException("Database migrations mismatch")
    }
	}
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        csv.enabled false
        html.enabled false
    }
}
